1.YYYY与yyyy的区别
  大多数情况下格式日期都是用的SimpleDateFormat，比如说把一个日期格式成"yyyy-MM-dd"的形式。对于年份来说，大写的Y和小写的y其意义是不同
的。y 是Year,Y 表示的是Week year。Week year 意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，那么这周就算入下一年。

2.BigDecimal
  i)禁止使用构造方法BigDecimal(double)的方式把double值转为BigDecimal对象。
    BigDecimal(double)存在精度损失风险，如 BigDecimal b = new BigDecimal(0.1F);实际存储的值为0.10000000149
    优先推荐入参为String的构造方法或使用BigDecimal的valueOf方法
    BigDecimal b1 = new BigDecimal("0.1");
    BigDecimal b2 = BigDecimal.valueOf(0.1);【此方法内部执行了Double的toString，按double实际能表达的精度进行了截断】
 ii)BigDecimal的等值比较应使用compareTo()，不能使用equals()
    equals()会比较值和精度(如1.0和1.00会返回false)，而compareTo()只比较值

3.RESTful API 设计规范:https://github.com/godruoyi/restful-api-specification

4.static:被static修饰的变量、被static修饰的方法统一属于类的静态资源，是类实例之间共享的，换言之，一处变、处处变。静态资源是类初始化的时候加载的，而非静态资源是类new的时候加载的。类的初始化早于类的new

5.BeanUtils.copyProperties不能拷贝List和数组属性。属性名相同但类型不同的属性不可拷贝

6.@JsonFormat和@DateTimeFormat
  i)@JsonFormat:1.可以把后端传给前端的Date转成时间字符串；
                2.可以把前端传给后端的时间字符串转成Date，但只适用于使用@RequestBody接受参数(即POST,PUT请求,因为是使用json封装的body)
    pattern:是你需要转换的时间日期的格式
    timezone：是时间设置为东八区，避免时间在转换中少8小时.
    例如： @JsonFormat(pattern="yyyy-MM-dd",timezone="GMT+8")
           private Date sourceDateStart;
 ii)@DatetimeFormat:一般是由前端传值给后端时,将String转换成Date类型。但是只适用于使用类似@RequestParam接受参数。即GET请求，url拼接的参数才生效，在@RequestBody下是无效的。
    例如：  @DateTimeFormat(pattern = "yyyy-MM-dd")
           private Date sourceDateStart;

7.Java数字转字符串自动补0的实现
      int n = 19;
      //%0代表前面补充0, 4代表长度为4, d代表参数为十进制整数
      String str = String.format("%04d", n);
      System.out.println(str); //0019

8.HashMap相关：https://baijiahao.baidu.com/s?id=1662733945029523270&wfr=spider&for=pc

9.事务注解 @Transactional：https://blog.csdn.net/yuanlaishini2010/article/details/45792069

10.@Transactional注解失效的场景(https://baijiahao.baidu.com/s?id=1661565712893820457&wfr=spider&for=pc)：
   i)Transactional注解标注方法修饰符为非public时
     分析：@Transactional是基于动态代理实现的，标注@Transactional的方法如果修饰符不是public，那么就默认方法的@Transactional信息为空，那么将不会对bean实例进行代理对象创建或者不会对方法进行代理调用
  ii)在类内部调用调用类内部@Transactional标注的方法(同一个类中一个非事务的方法调用另一个事务方法)
     分析：同上，事务管理是基于动态代理对象的代理逻辑实现的，如果在类内部调用类内部的事务方法，这个调用事务方法的过程并不是通过代理对象来调用的，而是直接通过this对象来调用方法，绕过了代理对象，那么肯定也没有代理逻辑了
     解决：在同一个类中不直接调用，而通过自身实现的接口调用，也能开启事务管理（可以但没必要）
 iii)事务方法内部捕捉了异常，没有抛出新的异常，导致事务操作不会进行回滚
     分析：事务想要回滚，必须能够在代理逻辑中捕捉到异常才行，如果异常中途被捕捉掉，那么事务将不会回滚

11.Spring Event事件监听（实用）
   作用：使用观察者设计模式，使得代码松耦合。一个 Bean 处理完成任务后希望通知其它 Bean 或者说 一个Bean 想观察监听另一个Bean的行为。同步的将代码解耦
   实现：i)自定义事件（消息体：一个传递参数的bean）:继承 ApplicationEvent
       ii)定义监听器：实现 ApplicationListener 或者通过 @EventListener 注解到方法上(方法参数为定义的消息体)
      iii)定义发布者：通过ApplicationEventPublisher.publishEvent(event)进行发布
   关于@TransactionalEventListener：使用@TransactionalEventListener定义监听器。可解决因事务还没有提交，导致获取不到正确数据的问题。
   @TransactionalEventListener分为4个监听类型：1.BEFORE_COMMIT; 2.AFTER_COMMIT; 3.AFTER_ROLLBACK; 4.AFTER_COMPLETION(表示事务完成，包括提交和回滚)

12.@Async:在Spring中，基于@Async标注的方法，称之为异步方法；这些方法将在执行的时候，将会在独立的线程中被执行，调用者无需等待它的完成，即可继续其他的操作。
          注意：与@Transactional共同注解同一个方法，在其调用数据库操作之时，将无法产生事务管理的控制，原因就在于其是基于异步处理的操作。可以将需要事务管理操作的方法放置到异步方法内部，在内部被调用的方法上添加@Transactional.

13.@PostConstruct和@PreDestroy注解:java自带注解,这两个注解被用来修饰一个非静态的void()方法.而且这个方法不能有抛出异常声明。
   @PostConstruct:被修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次。
   执行顺序： 构造方法 > @Autowired(属性注入) > @PostConstruct

14.接口是可以多继承的。

15.关于懒加载(目前只实践了Hibernate): 条件:project和order为一对多关系
                                    现象:在同一个请求中，如果使用了级联关系获取orders(project.getOrders()),那么在新增或删除一条order后(修改操作待验证)，再使用级联关系获取orders,获取到的为操作之前的orders。
                                    原因:设置为懒加载的对象，在一个请求中，使用级联获取到关联对象后，后面再使用级联获取到的会直接取之前的
                                    解决：不使用级联来获取，使用jpa单独查询

16.事务的隔离级别：i)读未提交(Read uncommitted):一个事务可以读取到另一个事务还未提交的数据，可能导致出现 “脏读”、“不可重复读”、“幻读”
                ii)读已提交(Read committed):一个事务要等另一个事务提交后才可读取到数据，可能导致出现 “不可重复读”、“幻读”
               iii)可重复读(Repeatable read):读取数据时，不再允许这部分数据进行修改、删除操作,可能导致出现 “幻读”。这是MySQL的默认事务隔离级别
                IV)串行(Serializable):事务串行化顺序执行,不会出现以上问题，但效率低下

                脏读:读取到了未提交的数据
                不可重复读:同一个事务中执行完全相同的select语句时可能看到不一样的结果
                幻读:一个事务读取数据之后，另一个事务执行了insert操作，导致当前事务读取出了之前没有的记录。MySQL、ORACLE、PostgreSQL等成熟的数据库，出于性能考虑，都是使用了以乐观锁为理论基础的MVCC（多版本并发控制）来避免这个问题

17.MYSQL索引、B+树相关：https://mp.weixin.qq.com/s/8nx4yLOg542p_fmqjKDrKw

18.常量折叠：在编译过程中，Javac 编译器会进行一个叫做常量折叠的代码优化。常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。
            例如：      String s1 = "str";
                       String s2 = "ing";
                       String s3 = "str" + "ing";//相当于"string"
                       String s4 = s1 + s2;//因为s1,s2为变量，所以不能进行常量折叠（引用的值在程序编译期是无法确定的，编译器无法对其进行优化。）
                       String s5 ="string";
                       System.out.println(s3 == s4);//false
                       System.out.println(s3 == s5);//true
                       System.out.println(s4 == s5);//false
            **当s1,s2被修饰为final时,s1+s2便可进行常量折叠，表达式 s3 == s4 == s5 为true