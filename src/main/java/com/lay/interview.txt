一、招银
1.索引失效
*发生了隐式类型转换，如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描
 如：select * from tbl where id = 111
*对索引列进行运算，包括（+,-,*,/,!）
 如：select * from tbl where id - 1 = 1
*在索引列使用Oracle内部函数,对于这样情况应当创建基于函数的索引
 如：select * from tbl where round(id) = 10
*like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。
*or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效
*在索引列上使用 IS NULL , IS NOT NULL , != 操作，索引可能失效(注意是可能!)  https://mp.weixin.qq.com/s/CEJFsDBizdl0SvugGX7UmQ
*当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效
*组合索引，没有使用第一列索引(最左匹配)
 如：creat index test on tbl(id,name,age);
     select * from tbl where name = 'LAY' and age = '18'   没有使用id上的索引

2.聚集索引
https://mp.weixin.qq.com/s/8nx4yLOg542p_fmqjKDrKw

3.explain
作用：查看sql的执行计划，用来优化执行时间较久的语句。只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划
参数：*id：id值越大，优先级越高，越先执行
     *select_type：查询类型
     *table：显示这一行数据关于哪张表
     *type:在表中找到所需行的方式，又称访问类型
           常用类型：ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）
     *possible_keys:指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用
     *Key：显示MySQL实际决定使用的键（索引）
     *key_len：表示索引中使用的字节数
     *ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值
     *rows：表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数
     *Extra：该列包含MySQL解决查询的详细信息

4.dispatcherServlet流程? 是否单例?
   本质还是一个servlet,生命周期是跟随容器的，所以只有一个实例。详细流程：https://www.jianshu.com/p/8a20c547e245

5.synchronized 和 Lock 区别
*存在层次：synchronized为关键字，Lock是一个接口
*锁的释放：synchronized：已获取锁的线程执行完同步代码，释放锁，如果线程执行发生异常，jvm会让线程释放锁； Lock：必须要在finally中通过unlock释放锁，否则容易造成死锁。
*锁的获取：synchronized：假设A线程获得锁，B线程等待，如果A阻塞，B会一直等待； Lock：分情况而定，Lock有多种获取锁的方式，可以尝试获得锁，不必一直等待。
*锁状态：  synchronized：无法判断； Lock：可以判断，tryLock
*锁类型：  synchronized：可重入，不可中断，非公平； Lock：可重入，可中断，可公平（两者都可）
*synchronized使用Object对象本身的wait 、notify、notifyAll调度机制，而Lock可以使用Condition进行线程之间的调度
*性能：    在Java1.5中，synchronize是性能低效的。因为这是一个重量级操作，需要调用操作接口，导致有可能加锁消耗的系统时间比加锁以外的操作还多。相比之下使用Java提供的Lock对象，性能更高一些。
           到了Java1.6，synchronize进行了很多优化，有适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。导致在Java1.6上synchronize的性能并不比Lock差。

6.自旋锁
*定义：当一个线程获取锁时，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断是否能成功获取到锁，直到获取到锁才退出循环
*优点：自旋锁不会使线程状态发生切换，线程一直都是active的，不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快。
*缺点：在持有锁的线程占用锁时间过长或锁的竞争过于激烈的情况下，线程在自旋过程中会长时间获取不到锁资源，将引起CPU的浪费。

7.synchronized 修饰在 static方法和非static方法的区别
*修饰static方法：多线程下，获取的是类锁（即Class本身，注意：不是实例），作用范围是整个静态方法，作用的对象是这个类的所有对象。
*修饰非static方法：多线程下，获取的是对象锁（即类的实例对象），作用范围是整个方法，作用对象是调用该方法的对象。不同对象间没有竞争关系

8.线程有哪些状态
*新建状态（New）：新建了一个线程对象
*就绪状态（Runnable）：其它线程调用了start()，该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权，其它运行所需资源已全部获得。
*运行状态（Running）：就绪状态的线程获取到了CPU
*阻塞状态（Blocked）：因为某种原因放弃CPU使用权，暂时停止运行。直到线程重新进入就绪状态，才有机会重新运行。（调用了sleep(),join(),wait()等方法，或者获取对象同步锁时发现被其它线程占用）
*死亡状态（Dead）：线程已执行完毕或因异常退出了run()方法

9.HashMap、HashTable、ConcurrentHashMap

10.什么是幂等性（idempotent），put和post的区别
在编程中一个幂等操作的特点是执行多次或一次，其影响是相同的，所以get,put,delete都是幂等的
put一般用于更新操作，具有幂等性,post一般用于新增资源，不具备幂等性

11.git提交文件步骤
*

12.git pull 和fetch 的区别

13.Maven中常用命令

14.IOC,AOP

15.单例模式

16.事务管理

17.多线程


二、封面新闻
1.想要在数据库中存储emoji表情，需要怎么操作
emoji表情为4个字节的字符，而utf8字符集只支持1-3个字节的字符，所以需要将字符集修改为支持1-4个字节的utf8mb4

2.cookie和session的区别和联系
区别： 1.cookie存在本地浏览器上，session存在服务器上
       2.cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session
       3.session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE
       4.单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie

联系：session是通过cookie来工作的，sessionID以cookie的形式存在浏览器中。

3.有哪些GC策略以及它们各自的优点(https://javadoop.com/post/jvm-memory-management)
Serial(串行收集器)：适合内存有限的情况下，但回收慢
Parallel(并行收集器)：效率高，但当Heap过大时，应用程序暂停时间较长
CMS(Concurrent Mark-Sweep 并发收集器)：Old区回收暂停时间短，但产生内存碎片、整个GC耗时长、比较耗CPU
G1(Garbage First)：可设置预期的停顿时间，不产生内存碎片，但只适合大内存，一般6G以上，小内存不适用

4.有几种类加载器？它们的父子关系是怎样的？双亲委派？什么场景下使用自定义类加载器？（https://blog.csdn.net/codeyanbao/article/details/82875064）

                                        Bootstrap classLoader：主要负责加载核心的类库(rt.jar等)，构造ExtClassLoader和APPClassLoader
                                                 ↑
                                           ExtClassLoader：主要负责加载jre/lib/ext目录下的一些扩展的jar
                                                 ↑
                                           AppClassLoader：主要负责加载用户路径CLASSPATH路径下的类包
                                                 ↑向上委托
                                           用户自定义加载器：负责加载用户自定义路径下的类包

双亲委派机制：当一个类加载器收到了类加载请求，如果这个类没有被加载过，它首先不会尝试自己去加载这个类，而是把这个请求委派给父加载器去完成，
             每一个层次类加载器都是如此，因此所有的加载请求都应该传到启动类加载，只有当父类加载器反馈自己无法完成这个请求时（在它的加载
             路径下没有找到所需的Class），子类加载器才会尝试自己去加载。

双亲委派优势：1.沙箱安全机制：比如自己写的String.class类不会被加载，因为这种系统级别的类已经被Bootstrap classLoader加载了（最先尝试加载），
                           这样可以防止核心库被随意篡改。
             2.避免类重复加载：当父ClassLoader已经加载了该类的时候，就不需要子加载器再加载一次。

自定义加载器应用场景：隔离加载类、修改类加载的方式、扩展加载源、防止源码泄露

5.什么是幂等性，有哪些解决方案
概念：任意多次执行所产生的影响均与一次执行的影响相同，即无论你请求了多少次，对数据库的影响都只能有一次，不能重复处理。
解决： 1.去重表：建立唯一索引，保证最终插入数据库的只有一条数据（如订单表对订单号建立唯一索引，重复提交所产生的重复订单都会被过滤掉）
       2.状态标识：通过状态的变更，保证每个流程只会在对应的状态下执行
       3.Token令牌机制：发送请求前获取一个Token，将Token放在请求的Header中一起发送，后台对Token进行验证，通过后执行业务逻辑并删除此Token;重复请求时由于Token已被移除，所以验证失败。
       4.先查询后判断
       5.支付缓冲区：把订单的支付请求都快速地接下来，一个快速接单的缓冲管道。后续使用异步任务处理管道中的数据，过滤掉重复的待支付订单。优点是同步转异步，高吞吐。不足是不能及时地返回支付结果，需要后续监听支付结果的异步返回。


三、中电九天
1.事务特性以及隔离级别
Atomicity：原子性      要么全部成功，要么全部失败回滚
Consistency：一致性    事务执行前后都必须处于一致性状态，例如A和B互相转账，不管他们如何转账、转几次账，最终AB账户之和应该是相等的
Isolation：隔离性      并发事务之间相互隔离
Durability：持久性     事务一旦被提交，那么对数据库的修改就是永久性的

隔离级别：见StrangeLittleKnowledge

2.垃圾回收器算法
CMS：在年轻代使用并行收集器的 并行、stop-the-world、复制 算法；老年代使用 并发、标记 -> 清理 算法，不压缩。

3.Java内存模型（JMM）
所有的共享变量存在于主内存中，每个线程有自己的本地内存，线程读写共享数据也是通过本地内存交换的(本地内存是JMM的一个抽象概念，并不真实存在，它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。本地内存中存储了该线程以读/写共享变量的拷贝副本。)

4.TCP三次握手四次挥手
https://www.cnblogs.com/onesea/p/13053697.html

四、杉数科技、傲梅科技
1.HashMap如何遍历数据
https://baijiahao.baidu.com/s?id=1662733945029523270&wfr=spider&for=pc

2.CAS有哪些缺点
ABA问题
循环时间长、开销大：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销
只能保证一个共享变量的原子操作

3.synchronized底层实现以及如何实现可重入
底层实现：synchronized 是由一对 monitorenter/monitorexit 指令实现的,分别位于同步代码块的开始和结束位置，monitor 对象是同步的基本实现单元。在JVM处理字节码会出现相关指令。
可重入实现：当jvm执行到monitorenter指令时，当前线程试图获取monitor对象的所有权，如果未加锁或者已经被当前线程所持有，就把锁的计数器+1；当执行monitorexit指令时，锁计数器-1；当锁计数器为0时，该锁就被释放了。
           如果获取monitor对象失败，该线程则会进入阻塞状态，直到其他线程释放锁。

4.spring event底层如何实现

5.redis数据结构(指的是value)
五种常用数据类型
String:底层为简单动态字符串，采用预分配冗余空间的方式减少内存的频繁分配;
List:底层为双向链表;
Set:底层为dict字典，使用hash表实现
Hash:是一个String类型的field和value的映射表，类似于Map<String, Object>, 适用于存储对象。底层的数据结构有两种，当field-value的长度较短且个数少时，使用ziplist；否则为hashtable
Zset:与set十分相似，不同的是有序集合的每一个成员都关联了一个score，集合的成员是唯一的，但评分可以重复。底层使用了hash和跳跃表，hash的作用是关联value和权重score;跳跃表用于给元素排序，根据score范围获取元素列表

新的数据类型
Bitmaps：可以实现对位的操作；
HyperLogLog：用于做基数统计的算法，在输入元素的数量和体积非常大时，计算所需空间总是固定的，并且很小(基数指的是集合中不重复的元素)
Geographic：地理信息的缩写，就是元素的二维坐标，在地图上就是经纬度

6.OSI七层和四层

7.ArrayList、LinkedList插入时间复杂度

8.两张数据表通过Inner Join连接，ON条件为 ‘姓名’ = ‘张三’，其中表A存在3条姓名为张三的记录，表B存在3条，问最终的查询结果有几条
3 × 3


五、合纵药易购

1.innodb底层实现原理
https://blog.csdn.net/davice_li/article/details/125165384
内存架构主要分为三大块：缓冲池、重做缓冲池和额外内存池

2.innodb和myisam的区别
事务：innodb支持事务、回滚，而myisam不支持，但查询速度要比innodb快
主键：InnoDB规定，如果没有设置主键，就自动的生成一个6字节的主键，而MyISAM允许没有任何索引和主键的存在，索引就是行的地址
外键：innodb支持外键，myisam不支持
表锁：InnoDB支持行锁和表锁，而MyISAM只支持表锁
全文索引：InnoDB不支持全文索引，但是可以用插件来实现相应的功能，而MyISAM是本身就支持全本索引
行数：InnoDB获取行数时，需要扫全表。而MyISAM保存了当前表的总行数，直接读取即可。

3.ArrayList和LinkedList的区别
ArrayList底层是动态数组，LinkedList底层是双向链表
get(int index)操作  ArrayList  O(1)   LinkedList O(n)
add(E e)操作        ArrayList  O(1)   LinkedList O(1)
add(int index, E element)  ArrayList  O(n)   LinkedList O(n)

4. redis做分布式锁原理
set key value有个带有NX参数的命令，这是一个原子性加锁的命令
redis命令：SET lockKey uid EX expireTime NX
代码形式：Boolean lock = redisTemplate.opsForValue().setIfAbsent( "lock","111");

5.hashmap 1.7和1.8的区别
底层结构：hashmap1.7底层结构是entry数组+链表，hashmap1.8底层结构是node数组+链表+红黑树
扩容策略：扩容时1.8会保持原链表的顺序并且在元素插入后检测是否需要扩容(尾插法)，1.7会颠倒链表的顺序并且在元素插入前检测是否需要扩容(头插法)

6.RocketMQ和Kafka的区别
https://blog.csdn.net/shijinghan1126/article/details/104724407

















